# -*- coding: utf-8 -*-
"""detect_circle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m6dZ00DEa2Om9ISplTS7Gf6Aiwbwl9zW
"""

# import the necessary packages
import numpy as np
import argparse
import math
from math import cos
from math import sin
import cv2
import matplotlib.pyplot as plt
import tensorflow as tf
import sys
import json
from PIL import Image
from sympy import sympify
from sympy.geometry import Point2D, Segment2D, Circle
from shapely.geometry import Point
from shapely.geometry.polygon import Polygon
from math import sqrt
import re



def intersec(x,y,b1,b2,c1,c2,r):
	A = Point2D(x,y)
	B = Point2D(b1,b2) #line1
	C = Point2D(c1,c2) #line2

	# Segment from A to B
	f_0 = Segment2D(A, B)
	# Segment from A to C
	f_1 = Segment2D(A, C)
	# Circle with center A and radius 118 
	c = Circle(A, sympify(r, rational=True))


	i_0 = c.intersection(f_0)
	i_1 = c.intersection(f_1)
	# print(i_0)
	# print(i_1)
	#\((.*)

	#ก้อน3 \,(.*)\)\]
	# re.split(r',\s*(?![^()]*\))', i_0)
	#จุดที่ 1
	string1 = re.split('\((.*)', str(i_0))
	string2 = re.split('(.*)\,', string1[1])
	string3 = re.split('\,(.*)\)\]', string1[1])

	#จุดที่2
	string4 = re.split('\((.*)', str(i_1))
	string5 = re.split('(.*)\,', string4[1])
	string6 = re.split('\,(.*)\)\]', string4[1])

	outputstr1 = string2[1]
	outputstr2 = string3[1]

	outputstr3 = string5[1]
	outputstr4 = string6[1]

	output1 = eval(outputstr1)
	output2 = eval(outputstr2) 

	output3 = eval(outputstr3)
	output4 = eval(outputstr4) 

	p1 = int(output1)
	p2 = int(output2)

	p3 = int(output3)
	p4 = int(output4)

	return p1,p2,p3,p4

def quadrant(x, y,x1,y1):
	if (x > x1 and y > y1):
		# print ("lies in Fourth quadrant")
		q=4
	
	elif (x < x1 and y > y1):
		# print ("lies in Third quadrant")
		q=3
    
	elif (x < x1 and y < y1):
		# print("lies in Second quadrant")
		q=2 
	
	elif (x > x1 and y < y1): 
		# print ("lies in First quadrant")
		q=1
    
	# elif (x == x1 and y > y1):
	# 	# print ("lies at positive y axis") 
	# 	q=0.5
	
	# elif (x == x1 and y < y1): 
	# 	# print ("lies at negative y axis") 
	# 	q=0.5
	
	# elif (y == x1 and x < y1): 
	# 	# print ("lies at negative x axis") 
	# 	q=0.5
	
	# elif (y == x1 and x > y1):
	# 	# print ("lies at positive x axis") 
	# 	q=0.5
	
	else:
		# print ("lies at origin") 
		q=0.14

	return q

with open("json/scriptparetest.jpg.json") as f:
  data = json.load(f)

#data[0][0] = ymin , data[0][1]=ymax, data[0][2]=xmin, data[0][3]=xmax

# This is needed since the notebook is stored in the object_detection folder.
sys.path.append("..")

def draw(x1,y1,r,ang):
	angle = ang+15
	length = r
	θ = angle * 3.14 / 180
	x2 = x1 + length * cos(θ)
	y2 = y1 + length * sin(θ) 
	return x2,y2


def checkpoint(list,listp,classnum):
	print("list of boxnum : ",list)
	p1,p2 = listp
	point = Point(p1, p2)
	#[(399, 428), (381, 361), (434, 330), (483, 379)]
	polygon = Polygon(list)
	# print(polygon.contains(point))
	print(polygon.contains(point))
	return polygon.contains(point),classnum

def changestrtoint(c1,c2,name):
	if (name=='one'):
		name=1
		c = c1,c2,name
		# print(sort_list_centroid)
	elif (name=='two'):
		name=2
		c = c1,c2,name
		# print(sort_list_centroid)
	elif (name=='three'):
		name=3
		c = c1,c2,name
		# print(sort_list_centroid)
	elif (name=='four'):
		name=4
		c = c1,c2,name
		# print(sort_list_centroid)
	elif (name=='five'):
		name=5
		c = c1,c2,name
		# print(sort_list_centroid)
	elif (name=='six'):
		name=6
		c = c1,c2,name
		# print(sort_list_centroid)
	elif (name=='seven'):
		name=7
		c = c1,c2,name
		# print(sort_list_centroid)
	elif (name=='eight'):
		name=8
		c = c1,c2,name
		# print(sort_list_centroid)
	elif (name=='nine'):
		name=9
		c = c1,c2,name
		# print(sort_list_centroid)
	elif (name=='ten'):
		name=10
		c = c1,c2,name
		# print(sort_list_centroid)
	elif (name=='eleven'):
		name=11
		c = c1,c2,name
		# print(sort_list_centroid)
	elif (name=='twelve'):
		name=12
		c = c1,c2,name
		# print(sort_list_centroid)
	return c,int(name)



# load the image, clone it for output, and then convert it to grayscale
image = cv2.imread("../../object_detection/here.jpg")
output = image.copy()
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
# detect circles in the image
circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, 1.2, 100)
line_list=[]
# ensure at least some circles were found
if circles is not None:
	# convert the (x, y) coordinates and radius of the circles to integers
	circles = np.round(circles[0, :]).astype("int")
	# loop over the (x, y) coordinates and radius of the circles
	for (x, y, r) in circles:
		in_r = r-90
		cv2.circle(output,(x, y),in_r, (255,0,0), 3)
		# draw the circle in the output image, then draw a rectangle
		# corresponding to the center of the circle cv2.circle(img, center, radius, color[, thicknes])
		cv2.circle(output, (x, y), r, (0, 255, 0), 4)
		cv2.rectangle(output, (x - 5, y - 5), (x + 5, y + 5), (0, 128, 255), -1)
		# line vertical
		start_ver, stop_ver = (x-r, y), (x+r, y)
		# line horizontal
		start_hor, stop_hor = (x, y-r), (x, y+r)
		#draw a line cv2.line(img, Point pt1, Point pt2, color[,thickness[,lineType[,shift]]])
		cv2.line(output,start_ver,stop_ver, (0,0,0), (3))
		cv2.line(output,start_hor,stop_hor, (0,0,0), (3))
		# วาดจุดจำลองว่าอยู่ตรงไหน = จุดสีแดงๆ ปรับตรง(400,200)เอา
		# 255, 309, 341, 360
		#(710, 126), (639, 197), (530, 134), (556, 38) #กรอบเลข1
		# cv2.circle(output, (710, 126), radius=0, color=(0, 0, 0), thickness=5)
		# cv2.circle(output, (639, 197), radius=0, color=(0, 0, 0), thickness=15)
		# cv2.circle(output, (530, 134), radius=0, color=(0, 0, 0), thickness=25)
		# cv2.circle(output, (556, 38), radius=0, color=(0, 0, 0), thickness=35)
		#(799, 279), (702, 305), (639, 197), (710, 126)   #กรอบเลข2
		# cv2.circle(output, (799, 279), radius=0, color=(255, 255, 0), thickness=55)
		# cv2.circle(output, (702, 305), radius=0, color=(255, 255, 0), thickness=15)
		# cv2.circle(output, (639, 197), radius=0, color=(255, 255, 0), thickness=25)
		# cv2.circle(output, (710, 126), radius=0, color=( 255, 255,0), thickness=35)
		# cv2.circle(output, (237, 476), radius=0, color=(255, 255, 0), thickness=75) #centriod 8
		# cv2.circle(output, (247, 220), radius=0, color=(255, 255, 0), thickness=85)
		# cv2.circle(output, (464, 215), radius=0, color=(255, 255, 0), thickness=95)
		# cv2.circle(output, (465, 277), radius=0, color=(255, 255, 0), thickness=105)

		#วาดเซนเตอร์
		# cv2.circle(output, (483, 379), radius=0, color=(122, 255, 0), thickness=60)
		# cv2.circle(output, (399,428), radius=0, color=(255, 0, 255), thickness=70)

		# print(x)
		# print(y)
	# show the output image

	j=2 #เส้นแรกอยู่บนเลข 5 ละวนตามเข็ม
	for i in range(30,385,30):
		x2,y2 = draw(x,y,r,i)
		xend = int(x2)
		yend = int(y2) 
		cv2.line(output,(x,y),(xend,yend),(78,26,34),1)
		line_list.append((xend,yend))

	print("line_list: ",line_list)
	
	length = len(line_list)
	print("length of line list: ",length)
	listofp = [] 

	for b in range(length):
		if (b==11):
			p1,p2,p3,p4 = intersec(x,y,*(line_list[b]),*(line_list[0]),in_r)
			pointcut = [line_list[0],(p3,p4),(p1,p2),line_list[b]]
			listofp.append(pointcut)

		else:
			p1,p2,p3,p4 = intersec(x,y,*(line_list[b]),*(line_list[b+1]),in_r)
			pointcut = [line_list[b+1],(p3,p4),(p1,p2),line_list[b]]
			listofp.append(pointcut)
		# cv2.circle(output, (p3,p4), radius=0, color=(255, i+50, 10), thickness=10)
		# cv2.circle(output, (p1,p2), radius=0, color=(4, i+10, 255), thickness=7)
	    
	
	# Image.fromarray(output).show()

#ymin,ymax,xmin,xmax bounding box 
def check_quardrant(name,total,xmin):
	if (total==4):
		mes = name+" in quardrant 1"
		_,n = changestrtoint(0,0,name)
		l = mes,name,n
		list_ofq.append(l)
	elif (total==8):
		mes = name+" in quardrant 2"
		_,n = changestrtoint(0,0,name)
		l = mes,name,n
		list_ofq.append(l)
	elif (total==12):
		mes = name+" in quardrant 3"
		_,n = changestrtoint(0,0,name)
		l = mes,name,n
		list_ofq.append(l)
	elif (total==16):
		mes = name+" in quardrant 4"
		_,n = changestrtoint(0,0,name)
		l = mes,name,n
		list_ofq.append(l)
	elif (total==6):
		mes =name+ " between q1 & q2"
		_,n = changestrtoint(0,0,name)
		l = mes,name,n
		list_ofq.append(l)
	elif (total==10):
		if(xmin<x):
			mes =name+ " between between q2 & q3"
			_,n = changestrtoint(0,0,name)
			l = mes,name,n
			list_ofq.append(l)
		elif(xmin>=x):
			mes =name+ " between q1 & q4"
			_,n = changestrtoint(0,0,name)
			l = mes,name,n
			list_ofq.append(l)
			
	elif (total==14):
		mes =name+ " between q3 & q4"
		_,n = changestrtoint(0,0,name)
		l = mes,name,n
		list_ofq.append(l)
		
	else:
		pc = quadrant((xmin+xmax)/2, (ymin+ymax)/2,x,y)
		check_center(name,pc,list_ofq)
		

def check_center(name,num,list_ofq):
	if (num==1):
		mes = name+" in quardrant 1"
		_,n = changestrtoint(0,0,name)
		l = mes,name,n
		list_ofq.append(l)
	elif (num==2):
		mes = name+" in quardrant 2"
		_,n = changestrtoint(0,0,name)
		l = mes,name,n
		list_ofq.append(l)
	elif (num==3):
		mes = name+" in quardrant 3"
		_,n = changestrtoint(0,0,name)
		l = mes,name,n
		list_ofq.append(l)
	elif (num==4):
		mes = name+" in quardrant 4"
		_,n = changestrtoint(0,0,name)
		l = mes,name,n
		list_ofq.append(l)

# Image.fromarray(output).show()
def checklist(temp):
	ordered_list = ['one','two','three','four','five','six','seven','eight','nine','ten','eleven','twelve']
	num_list = ['1','2','3','4','5','6','7','8','9','10','11','12']
	# print(ordered_list)
	print(temp)
	list_ = [x for x in ordered_list if x not in temp]
	com = set(temp) == set(ordered_list)
	return com,list_ 
arraylist=[]
def changeclass(dif):
	my_array = np.array(dif)
	print (len(my_array))
	# print (my_array[0])
	for i in range(len(my_array)):
		if (my_array[i] == 'one'):
			arraylist.append(1)
		elif (my_array[i] == 'two'):
			arraylist.append(2)
		elif (my_array[i] == 'three'):
			arraylist.append(3)
		elif (my_array[i] == 'four'):
			arraylist.append(4)
		elif (my_array[i] == 'five'):
			arraylist.append(5)
		elif (my_array[i] == 'six'):
			arraylist.append(6)
		elif (my_array[i] == 'seven'):
			arraylist.append(7)
		elif (my_array[i] == 'eight'):
			arraylist.append(8)
		elif (my_array[i] == 'nine'):
			arraylist.append(9)
		elif (my_array[i] == 'ten'):
			arraylist.append(10)
		elif (my_array[i] == 'eleven'):
			arraylist.append(11)
		elif (my_array[i] == 'twelve'):
			arraylist.append(12)
			

	print("class-diff: ",arraylist)

#load coordinates from json file
line=[]
name=[]
list=[]
list_centroid =[]
list_ofq =[]
for i in range(0, len(data)):
	line.append(data[i])
	ymin  = line[i][0]
	ymax = line[i][1]
	xmin = line[i][2]
	xmax = line[i][3]
	name = line[i][5][0].split(":")
	
	list.append(str(name[0]))
	p1 = quadrant(xmin,ymin,x,y)
	p2 = quadrant(xmax,ymin,x,y)
	p3 = quadrant(xmin,ymax,x,y)
	p4 = quadrant(xmax,ymax,x,y)
	total = p1+p2+p3+p4
	j, k = (xmin+xmax)/2, (ymin+ymax)/2
	list_centroid.append((int(j),int(k),str(name[0])))
	# Draw a circle in the center of rectangle
	cv2.circle(output, center=(int(j), int(k)), radius=3, color=(255, 0, 0), thickness=5)
	check_quardrant(name[0],total,xmin)


match,dif = checklist(list)
print("match? : ",match)
print("diff= " ,dif) #คลาสที่ไม่มี 
changeclass(dif)
print("list of quardrant: ",list_ofq)
list_ofq.sort(key = lambda x: x[2])  

# print("sort: ",list_ofq)
for i in range(0, len(list_ofq)):
	print(list_ofq[i][0])



j = 5
font=cv2.FONT_ITALIC
L=0
sort_list_centroid = []
# centriod of num


sort_list_centroid=[]


for i in list_centroid:
	c1,c2,name = i
	c,_ = changestrtoint(c1,c2,name)
	sort_list_centroid.append(c)

		# l = (c1,c2,name)
		# list_centroid.append(i)
		
	# print(list[L])
	# print(c1)
	# print(c2)
	# cv2.circle(output,(c1,c2), radius=0, color=(255, 255, 0), thickness=j)
	# cv2.putText(output,list[L], (c1,c2), font, 1, (255,0,0), 3, cv2.LINE_AA)
	L=L+1
	

# print(list_centroid)
# print(sort_list_centroid)
	
sort_list_centroid.sort(key = lambda x: x[2])  
print("sort: ",sort_list_centroid)
#sort_list_centroid[i][2]

# print(listofp)

Y = [5,6,7,8,9,10,11,12,1,2,3,4]

sort_listofp = [listofp for _,listofp in sorted(zip(Y,listofp))]
# # checkpoint(list_centroid)
# print(len(sort_listofp))
# print(list_centroid)
boxofnum =[]
# add class in sort_listofp 
for k in range(0, len(sort_listofp)):
	# print (k)
	result = [[m, n, s,t,k+1] for m, n, s,t in sort_listofp]
	boxofnum.append(result[k])

#[(710, 126), (639, 197), (530, 134), (556, 38), 1]

# print(len(boxofnum))
# print(len(sort_list_centroid))

# for i in range(len(boxofnum)):


	# if (boxofnum[i][4]==sort_list_centroid[i][2]):
	# 	checkpoint()
print("a:",sort_list_centroid)
# print(boxofnum)
# print(int(arraylist[0]))
idx = arraylist
# print(len(idx))

for i in range(len(idx)):
	print(idx)
	sort_list_centroid.insert(int(idx[i])-1, (0,0,0))
print("a(sort):",sort_list_centroid)
print("boxofnum: ",boxofnum)
for i in range(len(boxofnum)):
	# print(i)
	# print(boxofnum[i][:4])
	# print("x,y = ",type(sort_list_centroid[i][:2]))
	t = sort_list_centroid[i][:2]
	a, b = t
	boolean,classnum = checkpoint(boxofnum[i][:4],sort_list_centroid[i][:2],sort_list_centroid[i][2])
	cv2.circle(output,(int(a),int(b)), radius=0, color=(255, 255, 0), thickness=1)
	
	cv2.putText(output,str(boolean), (int(a),int(b)), font, 1, (0,0,0), 3, cv2.LINE_AA)

Image.fromarray(output).show()
# Image.fromarray(output).show()







